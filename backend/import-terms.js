#!/usr/bin/env node

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node import-terms.js [–ø—É—Ç—å_–∫_csv_—Ñ–∞–π–ª—É]
 */

import { executeQuery, initializeTables } from './src/db.js';
import { promises as fs } from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function parseCSVLine(line) {
  const result = [];
  let current = '';
  let inQuotes = false;
  let i = 0;
  
  while (i < line.length) {
    const char = line[i];
    
    if (char === '"') {
      if (inQuotes && line[i + 1] === '"') {
        // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞–≤—ã—á–∫–∞
        current += '"';
        i += 2;
      } else {
        // –ù–∞—á–∞–ª–æ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∫–∞–≤—ã—á–µ–∫
        inQuotes = !inQuotes;
        i++;
      }
    } else if (char === ',' && !inQuotes) {
      // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤–Ω–µ –∫–∞–≤—ã—á–µ–∫
      result.push(current);
      current = '';
      i++;
    } else {
      current += char;
      i++;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
  result.push(current);
  
  return result;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤
 */
async function importTerms(csvFilePath) {
  console.log('üìö –ò–º–ø–æ—Ä—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞');
  console.log('=' * 50);
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await initializeTables();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const csvExists = await fs.access(csvFilePath).then(() => true).catch(() => false);
    if (!csvExists) {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvFilePath}`);
      process.exit(1);
    }
    
    console.log(`üìÑ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: ${csvFilePath}`);
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvContent = await fs.readFile(csvFilePath, 'utf-8');
    const lines = csvContent.split('\n').filter(line => line.trim());
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lines.length} —Å—Ç—Ä–æ–∫ –≤ CSV —Ñ–∞–π–ª–µ`);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    const existingTerms = await executeQuery('SELECT COUNT(*) as count FROM terms');
    const existingCount = existingTerms[0].count;
    
    if (existingCount > 0) {
      console.log(`üíæ –ù–∞–π–¥–µ–Ω–æ ${existingCount} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤`);
      console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...');
      
      const backupPath = `terms_backup_${new Date().toISOString().split('T')[0]}.sql`;
      const backupTerms = await executeQuery('SELECT * FROM terms');
      
      let backupSQL = '-- –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤\n';
      backupSQL += 'CREATE TABLE IF NOT EXISTS terms_backup AS SELECT * FROM terms;\n';
      
      for (const term of backupTerms) {
        const escapedTerm = term.term.replace(/'/g, "''");
        const escapedDef = term.definition.replace(/'/g, "''");
        backupSQL += `INSERT INTO terms (term, definition) VALUES ('${escapedTerm}', '${escapedDef}');\n`;
      }
      
      await fs.writeFile(backupPath, backupSQL);
      console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${backupPath}`);
    }
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    await executeQuery('DELETE FROM terms');
    console.log('üóëÔ∏è –û—á–∏—â–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã');
    
    let successCount = 0;
    let errorCount = 0;
    let skippedCount = 0;
    
    console.log('\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV –¥–∞–Ω–Ω—ã—Ö...');
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) {
        skippedCount++;
        continue;
      }
      
      try {
        // –ü–∞—Ä—Å–∏–º CSV —Å—Ç—Ä–æ–∫—É
        const parsedLine = parseCSVLine(line);
        
        if (parsedLine.length >= 2) {
          const term = parsedLine[0].trim();
          const definition = parsedLine[1].trim();
          
          if (term && definition) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ—Ä–º–∏–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            if (term.length > 255) {
              console.warn(`‚ö†Ô∏è –¢–µ—Ä–º–∏–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>${255} —Å–∏–º–≤–æ–ª–æ–≤), —Å—Ç—Ä–æ–∫–∞ ${i + 1}: ${term.substring(0, 50)}...`);
              errorCount++;
              continue;
            }
            
            if (definition.length < 10) {
              console.warn(`‚ö†Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (<10 —Å–∏–º–≤–æ–ª–æ–≤), —Å—Ç—Ä–æ–∫–∞ ${i + 1}: ${term}`);
              errorCount++;
              continue;
            }
            
            await executeQuery(
              'INSERT INTO terms (term, definition) VALUES (?, ?)',
              [term, definition]
            );
            successCount++;
            
            if (successCount % 100 === 0) {
              console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${successCount} —Ç–µ—Ä–º–∏–Ω–æ–≤...`);
            }
          } else {
            console.warn(`‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ—Ä–º–∏–Ω –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Å—Ç—Ä–æ–∫–∞ ${i + 1}`);
            errorCount++;
          }
        } else {
          console.warn(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ ${i + 1}: ${line.substring(0, 100)}...`);
          errorCount++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i + 1}:`, error.message);
        errorCount++;
      }
    }
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:');
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successCount} —Ç–µ—Ä–º–∏–Ω–æ–≤`);
    console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${skippedCount}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    if (successCount > 0) {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = await executeQuery(`
        SELECT 
          COUNT(*) as total,
          AVG(LENGTH(term)) as avg_term_length,
          AVG(LENGTH(definition)) as avg_def_length,
          MAX(LENGTH(term)) as max_term_length,
          MAX(LENGTH(definition)) as max_def_length
        FROM terms
      `);
      
      const stat = stats[0];
      console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤:');
      console.log(`   üìö –í—Å–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: ${stat.total}`);
      console.log(`   üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞: ${Math.round(stat.avg_term_length)} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`   üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${Math.round(stat.avg_def_length)} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`   üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞: ${stat.max_term_length} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`   üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${stat.max_def_length} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
    
    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç —Ç–µ—Ä–º–∏–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤:', error);
    process.exit(1);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CSV —Ñ–∞–π–ª–∞
 */
async function validateCSV(csvFilePath) {
  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞...');
  
  try {
    const csvContent = await fs.readFile(csvFilePath, 'utf-8');
    const lines = csvContent.split('\n').filter(line => line.trim());
    
    let validLines = 0;
    let invalidLines = 0;
    
    for (let i = 0; i < Math.min(lines.length, 10); i++) {
      const line = lines[i].trim();
      if (!line) continue;
      
      const parsedLine = parseCSVLine(line);
      if (parsedLine.length >= 2 && parsedLine[0].trim() && parsedLine[1].trim()) {
        validLines++;
        console.log(`‚úÖ –°—Ç—Ä–æ–∫–∞ ${i + 1}: "${parsedLine[0].substring(0, 30)}..." -> "${parsedLine[1].substring(0, 50)}..."`);
      } else {
        invalidLines++;
        console.log(`‚ùå –°—Ç—Ä–æ–∫–∞ ${i + 1}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç`);
      }
    }
    
    console.log(`üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${Math.min(lines.length, 10)} —Å—Ç—Ä–æ–∫ –∏–∑ ${lines.length}`);
    console.log(`‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: ${validLines}`);
    console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: ${invalidLines}`);
    
    return invalidLines === 0;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('üìö –£—Ç–∏–ª–∏—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤');
    console.log('');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node import-terms.js <–ø—É—Ç—å_–∫_csv_—Ñ–∞–π–ª—É>');
    console.log('  node import-terms.js --validate <–ø—É—Ç—å_–∫_csv_—Ñ–∞–π–ª—É>');
    console.log('');
    console.log('–ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  node import-terms.js ../files/terms.csv');
    console.log('  node import-terms.js --validate ../files/terms.csv');
    console.log('');
    console.log('–§–æ—Ä–º–∞—Ç CSV —Ñ–∞–π–ª–∞:');
    console.log('  - –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞');
    console.log('  - –í—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞');
    console.log('  - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∫–∞–≤—ã—á–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
    process.exit(1);
  }
  
  if (args[0] === '--validate') {
    if (args.length < 2) {
      console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
      process.exit(1);
    }
    
    const isValid = await validateCSV(args[1]);
    process.exit(isValid ? 0 : 1);
  } else {
    await importTerms(args[0]);
  }
}

// –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
    .then(() => {
      console.log('‚úÖ –£—Ç–∏–ª–∏—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Ç–∏–ª–∏—Ç—ã:', error);
      process.exit(1);
    });
}

export { importTerms, parseCSVLine, validateCSV };