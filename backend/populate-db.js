#!/usr/bin/env node

import { executeQuery, initializeTables } from './src/db.js';
import { promises as fs } from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const FILES_BASE_PATH = process.env.FILES_PATH || path.join(process.cwd(), '../files');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function populateDatabase() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await initializeTables();
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π
    await executeQuery('DELETE FROM works');
    console.log('üóëÔ∏è –û—á–∏—â–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π');
    
    // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const works = await scanMusicLibrary(FILES_BASE_PATH);
    
    if (works.length === 0) {
      console.log('‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${works.length} –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π`);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    let successCount = 0;
    let errorCount = 0;
    
    for (const work of works) {
      try {
        await executeQuery(`
          INSERT INTO works (category, subcategory, composer, work_title, file_path, file_type, file_size)
          VALUES (?, ?, ?, ?, ?, ?, ?)
        `, [
          work.category,
          work.subcategory,
          work.composer,
          work.work_title,
          work.file_path,
          work.file_type,
          work.file_size
        ]);
        successCount++;
        
        if (successCount % 100 === 0) {
          console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${successCount} –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π...`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è ${work.file_path}:`, error.message);
        errorCount++;
      }
    }
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${successCount} –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π`);
    if (errorCount > 0) {
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    await populateTerms();
    
    console.log('üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
async function scanMusicLibrary(basePath) {
  const works = [];
  
  console.log(`üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${basePath}`);
  
  async function scanDirectory(currentPath, pathParts = []) {
    try {
      const items = await fs.readdir(currentPath, { withFileTypes: true });
      
      for (const item of items) {
        const itemPath = path.join(currentPath, item.name);
        
        if (item.isDirectory()) {
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          await scanDirectory(itemPath, [...pathParts, item.name]);
        } else if (item.isFile() && path.extname(item.name).toLowerCase() === '.pdf') {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF —Ñ–∞–π–ª
          const work = await parseWorkFromPath([...pathParts, item.name], itemPath);
          if (work) {
            works.push(work);
          }
        }
      }
    } catch (err) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${currentPath}`);
    }
  }
  
  await scanDirectory(basePath);
  return works;
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–∑ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
async function parseWorkFromPath(pathParts, fullPath) {
  if (pathParts.length < 2) {
    return null; // –ú–∏–Ω–∏–º—É–º –Ω—É–∂–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ñ–∞–π–ª
  }
  
  try {
    const stats = await fs.stat(fullPath);
    const fileName = pathParts[pathParts.length - 1];
    const fileExt = path.extname(fileName).toLowerCase();
    
    let category, subcategory, composer, workTitle;
    
    if (pathParts.length === 2) {
      // Category/File (—Ñ–∞–π–ª –ø—Ä—è–º–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
      category = pathParts[0];
      subcategory = null;
      composer = '–†–∞–∑–Ω—ã–µ';
      workTitle = path.basename(fileName, fileExt);
    } else if (pathParts.length === 3) {
      // Category/Composer/Work
      category = pathParts[0];
      subcategory = null;
      composer = pathParts[1];
      workTitle = path.basename(fileName, fileExt);
    } else if (pathParts.length === 4) {
      // Category/Subcategory/Composer/Work
      category = pathParts[0];
      subcategory = pathParts[1];
      composer = pathParts[2];
      workTitle = path.basename(fileName, fileExt);
    } else {
      // Category/Subcategory/Subsubcategory/Composer/Work (–∏–ª–∏ –≥–ª—É–±–∂–µ)
      category = pathParts[0];
      subcategory = pathParts.slice(1, -2).join('/'); // –í—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏
      composer = pathParts[pathParts.length - 2];
      workTitle = path.basename(fileName, fileExt);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    let fileType = 'other';
    switch (fileExt) {
      case '.pdf':
        fileType = 'pdf';
        break;
      case '.mp3':
        fileType = 'mp3';
        break;
      case '.sib':
        fileType = 'sib';
        break;
      case '.mus':
        fileType = 'mus';
        break;
    }
    
    return {
      category: category.trim(),
      subcategory: subcategory ? subcategory.trim() : null,
      composer: composer.trim(),
      work_title: workTitle.trim(),
      file_path: path.relative(process.cwd(), fullPath).replace(/\\/g, '/'),
      file_type: fileType,
      file_size: stats.size
    };
  } catch (error) {
    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${fullPath}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
async function populateTerms() {
  console.log('üìö –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤...');
  
  const terms = [
    {
      term: '–í–∞–ª—Ç–æ—Ä–Ω–∞',
      definition: '–ú–µ–¥–Ω—ã–π –¥—É—Ö–æ–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∫–æ–Ω–∏—á–µ—Å–∫–æ–π —Ç—Ä—É–±–∫–∏, —Å–≤–µ—Ä–Ω—É—Ç–æ–π –≤ –∫–æ–ª—å—Ü–æ –∏ –æ–∫–∞–Ω—á–∏–≤–∞—é—â–µ–π—Å—è —Ä–∞—Å—Ç—Ä—É–±–æ–º.'
    },
    {
      term: '–ö–æ–Ω—Ü–µ—Ä—Ç',
      definition: '–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —Å–æ–ª–∏—Ä—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–∏–ª–∏ –≥—Ä—É–ø–ø—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤) —Å –æ—Ä–∫–µ—Å—Ç—Ä–æ–º.'
    },
    {
      term: '–°–æ–Ω–∞—Ç–∞',
      definition: '–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –æ–±—ã—á–Ω–æ –∏–∑ —Ç—Ä–µ—Ö –∏–ª–∏ —á–µ—Ç—ã—Ä–µ—Ö —á–∞—Å—Ç–µ–π, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –¥–≤—É—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.'
    },
    {
      term: '–≠—Ç—é–¥',
      definition: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—å–µ—Å–∞, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–µ—Ö–Ω–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.'
    },
    {
      term: '–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
      definition: '–ü–µ—Ä–µ–Ω–æ—Å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ –¥—Ä—É–≥—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.'
    },
    {
      term: '–ê–º–±—É—à—é—Ä',
      definition: '–ü–æ–ª–æ–∂–µ–Ω–∏–µ –≥—É–±, —è–∑—ã–∫–∞ –∏ –ª–∏—Ü–µ–≤—ã—Ö –º—ã—à—Ü –ø—Ä–∏ –∏–≥—Ä–µ –Ω–∞ –¥—É—Ö–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö.'
    },
    {
      term: '–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–π',
      definition: '–ó–≤—É–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –Ω–∞ –≤–∞–ª—Ç–æ—Ä–Ω–µ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ–Ω—Ç–∏–ª–µ–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–º –∑–≤—É–∫–æ—Ä—è–¥–µ.'
    },
    {
      term: '–°—É—Ä–¥–∏–Ω–∞',
      definition: '–ü—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–±—Ä–∞ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–≤—É–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.'
    },
    {
      term: '–ì–ª–∏—Å—Å–∞–Ω–¥–æ',
      definition: '–°–∫–æ–ª—å–∑—è—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –æ–¥–Ω–æ–≥–æ –∑–≤—É–∫–∞ –∫ –¥—Ä—É–≥–æ–º—É —Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤—ã—Å–æ—Ç—ã.'
    },
    {
      term: '–¢—Ä–µ–º–æ–ª–æ',
      definition: '–ë—ã—Å—Ç—Ä–æ–µ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–≤—É–∫–∞ –∏–ª–∏ –±—ã—Å—Ç—Ä–æ–µ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö –∑–≤—É–∫–æ–≤.'
    }
  ];
  
  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
  await executeQuery('DELETE FROM terms');
  
  for (const term of terms) {
    try {
      await executeQuery(
        'INSERT INTO terms (term, definition) VALUES (?, ?)',
        [term.term, term.definition]
      );
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞ ${term.term}:`, error.message);
    }
  }
  
  console.log(`üìö –î–æ–±–∞–≤–ª–µ–Ω–æ ${terms.length} –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤`);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  populateDatabase()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
      process.exit(1);
    });
}