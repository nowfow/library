version: '3.8'

services:
  # База данных MySQL
  mysql:
    image: mysql:8.0
    container_name: music_library_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-music_library_root}
      MYSQL_DATABASE: ${DB_NAME:-music_library}
      MYSQL_USER: ${DB_USER:-music_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-music_password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - music_library_network

  # Backend API
  backend:
    build: .
    container_name: music_library_backend
    restart: unless-stopped
    depends_on:
      - mysql
    environment:
      NODE_ENV: production
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${DB_USER:-music_user}
      DB_PASSWORD: ${DB_PASSWORD:-music_password}
      DB_NAME: ${DB_NAME:-music_library}
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key}
      PORT: 3000
      FILES_PATH: /app/files
    ports:
      - "3000:3000"
    volumes:
      - ./files:/app/files:ro
      - backend_logs:/app/logs
    networks:
      - music_library_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx для проксирования запросов (опционально)
  nginx:
    image: nginx:alpine
    container_name: music_library_nginx
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - music_library_network

  # Telegram бот
  telegram-bot:
    build: ../telegram-bot
    container_name: music_library_telegram_bot
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      BACKEND_API_URL: http://backend:3000/api
      DATABASE_URL: sqlite:///data/bot_cache.db
      LOG_LEVEL: INFO
    volumes:
      - telegram_bot_data:/app/data
      - telegram_bot_logs:/app/logs
    networks:
      - music_library_network

volumes:
  mysql_data:
    driver: local
  backend_logs:
    driver: local
  telegram_bot_data:
    driver: local
  telegram_bot_logs:
    driver: local

networks:
  music_library_network:
    driver: bridge