#!/usr/bin/env node

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */

import { executeQuery, initializeTables, pool, testDatabaseConnection } from '../src/db.js';
import { promises as fs } from 'fs';
import path from 'path';
import dotenv from 'dotenv';

dotenv.config();

const commands = {
  init: {
    description: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
    action: initDatabase
  },
  drop: {
    description: '–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–û–°–¢–û–†–û–ñ–ù–û!)',
    action: dropDatabase
  },
  reset: {
    description: '–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ)',
    action: resetDatabase
  },
  status: {
    description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
    action: showStatus
  },
  backup: {
    description: '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
    action: backupDatabase
  },
  'import-terms': {
    description: '–ò–º–ø–æ—Ä—Ç —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞',
    action: importTermsFromCSV
  },
  'create-admin': {
    description: '–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
    action: createAdminUser
  }
};

async function initDatabase() {
  console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  try {
    await testDatabaseConnection();
    await initializeTables();
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

async function dropDatabase() {
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!');
  
  const tables = ['collection_works', 'user_collections', 'works', 'terms', 'users'];
  
  try {
    await testDatabaseConnection();
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    await executeQuery('SET FOREIGN_KEY_CHECKS = 0');
    
    for (const table of tables) {
      try {
        await executeQuery(`DROP TABLE IF EXISTS ${table}`);
        console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${table}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ${table}:`, error.message);
      }
    }
    
    // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    await executeQuery('SET FOREIGN_KEY_CHECKS = 1');
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  }
}

async function resetDatabase() {
  console.log('üîÑ –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  await dropDatabase();
  await initDatabase();
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

async function showStatus() {
  console.log('üìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  
  try {
    await testDatabaseConnection();
    
    const tables = ['users', 'terms', 'works', 'user_collections', 'collection_works'];
    
    for (const table of tables) {
      try {
        const result = await executeQuery(`SELECT COUNT(*) as count FROM ${table}`);
        console.log(`  üìã ${table}: ${result[0].count} –∑–∞–ø–∏—Å–µ–π`);
      } catch (error) {
        console.log(`  ‚ùå ${table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbInfo = await executeQuery('SELECT VERSION() as version, DATABASE() as database');
    console.log(`\nüìç MySQL –≤–µ—Ä—Å–∏—è: ${dbInfo[0].version}`);
    console.log(`üìç –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbInfo[0].database}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    process.exit(1);
  }
}

async function backupDatabase() {
  console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupDir = path.join(process.cwd(), 'backups');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    await fs.mkdir(backupDir, { recursive: true });
    
    const tables = ['users', 'terms', 'works', 'user_collections', 'collection_works'];
    const backup = {
      timestamp: new Date().toISOString(),
      tables: {}
    };
    
    await testDatabaseConnection();
    
    for (const table of tables) {
      try {
        const data = await executeQuery(`SELECT * FROM ${table}`);
        backup.tables[table] = data;
        console.log(`üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ${table}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Ç–∞–±–ª–∏—Ü—ã ${table}:`, error.message);
      }
    }
    
    const backupFile = path.join(backupDir, `backup-${timestamp}.json`);
    await fs.writeFile(backupFile, JSON.stringify(backup, null, 2), 'utf8');
    
    console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupFile}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
    process.exit(1);
  }
}

async function importTermsFromCSV() {
  const csvFile = process.argv[4] || 'terms.csv';
  
  console.log(`üìö –ò–º–ø–æ—Ä—Ç —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: ${csvFile}`);
  
  try {
    if (!await fs.access(csvFile).then(() => true).catch(() => false)) {
      throw new Error(`–§–∞–π–ª ${csvFile} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    const csvContent = await fs.readFile(csvFile, 'utf8');
    const lines = csvContent.split('\n').filter(line => line.trim());
    
    await testDatabaseConnection();
    
    let imported = 0;
    let skipped = 0;
    
    for (const line of lines) {
      const [term, definition] = line.split(',').map(item => item.trim().replace(/^"|"$/g, ''));
      
      if (!term || !definition) {
        skipped++;
        continue;
      }
      
      try {
        await executeQuery(
          'INSERT INTO terms (term, definition) VALUES (?, ?) ON DUPLICATE KEY UPDATE definition = VALUES(definition)',
          [term, definition]
        );
        imported++;
      } catch (error) {
        console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω "${term}":`, error.message);
        skipped++;
      }
    }
    
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${imported} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, ${skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤:', error.message);
    process.exit(1);
  }
}

async function createAdminUser() {
  const email = process.argv[4] || 'admin@example.com';
  const password = process.argv[5] || 'admin123';
  const name = process.argv[6] || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
  
  console.log(`üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${email}`);
  
  try {
    await testDatabaseConnection();
    
    const bcrypt = await import('bcrypt');
    const passwordHash = await bcrypt.hash(password, 10);
    
    await executeQuery(
      'INSERT INTO users (email, password_hash, name, role) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE role = "admin"',
      [email, passwordHash, name, 'admin']
    );
    
    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log(`üìß Email: ${email}`);
    console.log(`üîë –ü–∞—Ä–æ–ª—å: ${password}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
    process.exit(1);
  }
}

function showHelp() {
  console.log('üîß –£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/db-manager.js <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]\n');
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  
  for (const [command, info] of Object.entries(commands)) {
    console.log(`  ${command.padEnd(15)} - ${info.description}`);
  }
  
  console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  node scripts/db-manager.js init');
  console.log('  node scripts/db-manager.js import-terms terms.csv');
  console.log('  node scripts/db-manager.js create-admin admin@test.com password123 "–ò–º—è –ê–¥–º–∏–Ω–∞"');
}

async function main() {
  const command = process.argv[2];
  
  if (!command || command === 'help' || command === '--help') {
    showHelp();
    return;
  }
  
  if (!commands[command]) {
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
    console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "help" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥');
    process.exit(1);
  }
  
  try {
    await commands[command].action();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã
main().catch(error => {
  console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});