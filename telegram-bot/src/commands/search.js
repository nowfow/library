import { fmt, bold, italic, code } from 'telegraf/format';
import { searchWorks, searchTerms } from '../services/api.js';
import { validateSearchQuery, asyncHandler } from '../utils/errorHandler.js';
import { formatWork, formatTerm, createPaginationInfo, paginate } from '../utils/formatting.js';
import { createSearchResultsKeyboard, createMainMenuKeyboard } from '../utils/keyboards.js';

/**
 * Register search commands
 * @param {Object} bot - Telegraf bot instance
 */
export function searchCommands(bot) {
  bot.command('search_composer', searchComposerCommand);
  bot.command('search_work', searchWorkCommand);
  bot.command('search_term', searchTermCommand);
  bot.command('browse', browseCommand);
}

/**
 * Handle /search_composer command
 */
const searchComposerCommand = asyncHandler(async (ctx) => {
  const query = ctx.payload || ctx.args?.join(' ') || '';
  
  if (!query) {
    return ctx.reply(fmt`üîç ${bold('–ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—É')}

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –∏–º–µ–Ω–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞:
${code('/search_composer <–∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞>')}

${italic('–ü—Ä–∏–º–µ—Ä—ã:')}
${code('/search_composer –ë–∞—Ö')}
${code('/search_composer Mozart')}
${code('/search_composer –ß–∞–π–∫–æ–≤—Å–∫–∏–π')}`, createMainMenuKeyboard());
  }

  const validation = validateSearchQuery(query);
  if (!validation.valid) {
    return ctx.reply(`‚ùå ${validation.error}`);
  }

  const searchingMsg = await ctx.reply(fmt`üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞: ${bold(validation.query)}...`);

  try {
    const results = await searchWorks({ composer: validation.query });
    
    if (results.length === 0) {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        searchingMsg.message_id,
        undefined,
        fmt`‚ùå ${bold('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}

–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä "${italic(validation.query)}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é`,
        createMainMenuKeyboard()
      );
      return;
    }

    // Store search results in session
    ctx.session.searchResults = results;
    ctx.session.searchType = 'composer';
    ctx.session.searchQuery = validation.query;
    ctx.session.currentPage = 0;

    await displaySearchResults(ctx, searchingMsg.message_id);
    
  } catch (error) {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      searchingMsg.message_id,
      undefined,
      fmt`‚ùå ${bold('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞')}
${error.message}`,
      createMainMenuKeyboard()
    );
  }
});

/**
 * Handle /search_work command
 */
const searchWorkCommand = asyncHandler(async (ctx) => {
  const query = ctx.payload || ctx.args?.join(' ') || '';
  
  if (!query) {
    return ctx.reply(fmt`üéº ${bold('–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é')}

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:
${code('/search_work <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è>')}

${italic('–ü—Ä–∏–º–µ—Ä—ã:')}
${code('/search_work –°–æ–Ω–∞—Ç–∞')}
${code('/search_work –°–∏–º—Ñ–æ–Ω–∏—è')}
${code('/search_work –≠—Ç—é–¥')}`, createMainMenuKeyboard());
  }

  const validation = validateSearchQuery(query);
  if (!validation.valid) {
    return ctx.reply(`‚ùå ${validation.error}`);
  }

  const searchingMsg = await ctx.reply(fmt`üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${bold(validation.query)}...`);

  try {
    const results = await searchWorks({ work: validation.query });
    
    if (results.length === 0) {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        searchingMsg.message_id,
        undefined,
        fmt`‚ùå ${bold('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}

–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ "${italic(validation.query)}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—É`,
        createMainMenuKeyboard()
      );
      return;
    }

    // Store search results in session
    ctx.session.searchResults = results;
    ctx.session.searchType = 'work';
    ctx.session.searchQuery = validation.query;
    ctx.session.currentPage = 0;

    await displaySearchResults(ctx, searchingMsg.message_id);
    
  } catch (error) {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      searchingMsg.message_id,
      undefined,
      fmt`‚ùå ${bold('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞')}
${error.message}`,
      createMainMenuKeyboard()
    );
  }
});

/**
 * Handle /search_term command
 */
const searchTermCommand = asyncHandler(async (ctx) => {
  const query = ctx.payload || ctx.args?.join(' ') || '';
  
  if (!query) {
    return ctx.reply(fmt`üìö ${bold('–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤')}

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–æ–º:
${code('/search_term <—Ç–µ—Ä–º–∏–Ω>')}

${italic('–ü—Ä–∏–º–µ—Ä—ã:')}
${code('/search_term –∞–∫–∫–æ—Ä–¥')}
${code('/search_term —Ñ–æ—Ä—Ç–µ')}
${code('/search_term –º–æ–¥—É–ª—è—Ü–∏—è')}`, createMainMenuKeyboard());
  }

  const validation = validateSearchQuery(query);
  if (!validation.valid) {
    return ctx.reply(`‚ùå ${validation.error}`);
  }

  const searchingMsg = await ctx.reply(fmt`üîç –ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞: ${bold(validation.query)}...`);

  try {
    const results = await searchTerms(validation.query);
    
    if (results.length === 0) {
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        searchingMsg.message_id,
        undefined,
        fmt`‚ùå ${bold('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}

–¢–µ—Ä–º–∏–Ω "${italic(validation.query)}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–π —Ç–µ—Ä–º–∏–Ω`,
        createMainMenuKeyboard()
      );
      return;
    }

    // Store search results in session
    ctx.session.searchResults = results;
    ctx.session.searchType = 'terms';
    ctx.session.searchQuery = validation.query;
    ctx.session.currentPage = 0;

    await displayTermResults(ctx, searchingMsg.message_id);
    
  } catch (error) {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      searchingMsg.message_id,
      undefined,
      fmt`‚ùå ${bold('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞')}
${error.message}`,
      createMainMenuKeyboard()
    );
  }
});

/**
 * Handle /browse command
 */
const browseCommand = asyncHandler(async (ctx) => {
  ctx.session.currentPath = '/';
  
  const message = fmt`üìÅ ${bold('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤')}

–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ñ–∞–π–ª–æ–≤ –≤ –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...`;
  
  await ctx.reply(message);
  
  // Trigger file browser
  const { fileNavigationHandler } = await import('../handlers/fileNavigation.js');
  await fileNavigationHandler(ctx, { a: 'browse', t: 'start' });
});

/**
 * Display search results with pagination
 * @param {Object} ctx - Telegraf context
 * @param {number} messageId - Message ID to edit
 */
async function displaySearchResults(ctx, messageId) {
  const { searchResults, searchType, searchQuery, currentPage } = ctx.session;
  const pagination = paginate(searchResults, currentPage, 10);
  
  let messageText;
  
  if (searchType === 'composer') {
    messageText = fmt`üîç ${bold('–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞:')} ${italic(searchQuery)}

${createPaginationInfo(pagination.currentPage, pagination.totalPages, pagination.totalItems)}

${pagination.items.map((work, index) => formatWork(work, pagination.currentPage * 10 + index)).join('\n\n')}`;
  } else {
    messageText = fmt`üîç ${bold('–ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:')} ${italic(searchQuery)}

${createPaginationInfo(pagination.currentPage, pagination.totalPages, pagination.totalItems)}

${pagination.items.map((work, index) => formatWork(work, pagination.currentPage * 10 + index)).join('\n\n')}`;
  }

  const keyboard = createSearchResultsKeyboard(pagination.items, pagination, 'search');

  if (messageId) {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      messageId,
      undefined,
      messageText,
      keyboard
    );
  } else {
    await ctx.reply(messageText, keyboard);
  }
}

/**
 * Display term search results
 * @param {Object} ctx - Telegraf context
 * @param {number} messageId - Message ID to edit
 */
async function displayTermResults(ctx, messageId) {
  const { searchResults, searchQuery, currentPage } = ctx.session;
  const pagination = paginate(searchResults, currentPage, 5); // Fewer terms per page due to descriptions
  
  const messageText = fmt`üìö ${bold('–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:')} ${italic(searchQuery)}

${createPaginationInfo(pagination.currentPage, pagination.totalPages, pagination.totalItems)}

${pagination.items.map(formatTerm).join('\n\n')}`;

  const keyboard = createSearchResultsKeyboard(pagination.items, pagination, 'terms');

  if (messageId) {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      messageId,
      undefined,
      messageText,
      keyboard
    );
  } else {
    await ctx.reply(messageText, keyboard);
  }
}

export { displaySearchResults, displayTermResults };