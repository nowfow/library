import { fmt, bold, code } from 'telegraf/format';

/**
 * Global error handler for the bot
 * @param {Error} err - Error object
 * @param {Object} ctx - Telegraf context
 */
export function errorHandler(err, ctx) {
  console.error('‚ùå Bot Error:', err);
  
  // Log error details
  if (ctx?.update) {
    console.error('Update:', JSON.stringify(ctx.update, null, 2));
  }
  
  // Send user-friendly error message
  const errorMessage = getUserFriendlyError(err);
  
  if (ctx?.reply) {
    ctx.reply(errorMessage).catch(replyErr => {
      console.error('Failed to send error message:', replyErr);
    });
  }
}

/**
 * Convert technical errors to user-friendly messages
 * @param {Error} error - Error object
 * @returns {string} User-friendly error message
 */
function getUserFriendlyError(error) {
  const message = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  
  // Network errors
  if (message.includes('ECONNREFUSED') || message.includes('ENOTFOUND')) {
    return fmt`‚ùå ${bold('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')}
–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
  }
  
  // Timeout errors
  if (message.includes('timeout') || message.includes('ETIMEDOUT')) {
    return fmt`‚è±Ô∏è ${bold('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è')}
–°–µ—Ä–≤–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
  }
  
  // API errors
  if (message.includes('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞') || message.includes('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è')) {
    return fmt`üîç ${bold('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞')}
${message}
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.`;
  }
  
  // File errors
  if (message.includes('—Ñ–∞–π–ª') || message.includes('file')) {
    return fmt`üìÅ ${bold('–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞')}
–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω.`;
  }
  
  // WebDAV errors
  if (message.includes('WebDAV') || message.includes('403') || message.includes('401')) {
    return fmt`‚òÅÔ∏è ${bold('–û—à–∏–±–∫–∞ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞')}
–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
  }
  
  // Database errors
  if (message.includes('database') || message.includes('mysql') || message.includes('query')) {
    return fmt`üíæ ${bold('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')}
–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
  }
  
  // Telegram API errors
  if (error.code === 400) {
    return fmt`üì± ${bold('–û—à–∏–±–∫–∞ Telegram')}
–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`;
  }
  
  if (error.code === 429) {
    return fmt`üö´ ${bold('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤')}
–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.`;
  }
  
  // Generic error
  return fmt`‚ùå ${bold('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')}
–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
${code('–ö–æ–¥ –æ—à–∏–±–∫–∏: ' + (error.code || 'UNKNOWN'))}`;
}

/**
 * Async error handler wrapper
 * @param {Function} fn - Async function to wrap
 * @returns {Function} Wrapped function
 */
export function asyncHandler(fn) {
  return async (ctx, next) => {
    try {
      await fn(ctx, next);
    } catch (error) {
      errorHandler(error, ctx);
    }
  };
}

/**
 * Validate search query
 * @param {string} query - Search query
 * @returns {Object} Validation result
 */
export function validateSearchQuery(query) {
  if (!query || typeof query !== 'string') {
    return {
      valid: false,
      error: '–ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
    };
  }
  
  const trimmed = query.trim();
  
  if (trimmed.length < 2) {
    return {
      valid: false,
      error: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'
    };
  }
  
  if (trimmed.length > 100) {
    return {
      valid: false,
      error: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)'
    };
  }
  
  return {
    valid: true,
    query: trimmed
  };
}

/**
 * Safe JSON parse
 * @param {string} str - JSON string
 * @param {*} defaultValue - Default value if parsing fails
 * @returns {*} Parsed value or default
 */
export function safeJsonParse(str, defaultValue = null) {
  try {
    return JSON.parse(str);
  } catch {
    return defaultValue;
  }
}