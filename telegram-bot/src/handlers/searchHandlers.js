import { fmt, bold, italic, link } from 'telegraf/format';
import { getWorkFiles, getFileDownloadUrl } from '../services/api.js';
import { asyncHandler } from '../utils/errorHandler.js';
import { parseCallbackData, createWorkDetailsKeyboard, createMainMenuKeyboard } from '../utils/keyboards.js';
import { displaySearchResults, displayTermResults } from '../commands/search.js';
import { formatWork, paginate } from '../utils/formatting.js';

/**
 * Register search callback handlers
 * @param {Object} bot - Telegraf bot instance
 */
export function searchHandlers(bot) {
  bot.action(/^search:/, searchCallbackHandler);
  bot.action(/^terms:/, termsCallbackHandler);
}

/**
 * Handle search-related callbacks
 */
const searchCallbackHandler = asyncHandler(async (ctx) => {
  const callbackData = parseCallbackData(ctx.callbackQuery.data.replace('search:', ''));
  
  switch (callbackData.t) {
    case 'composer':
      await handleSearchTypeCallback(ctx, 'composer');
      break;
    case 'work':
      await handleSearchTypeCallback(ctx, 'work');
      break;
    case 'terms':
      await handleSearchTypeCallback(ctx, 'terms');
      break;
    case 'page':
      await handleSearchPageCallback(ctx, callbackData);
      break;
    case 'select':
      await handleSearchSelectCallback(ctx, callbackData);
      break;
    case 'menu':
      await handleSearchMenuCallback(ctx);
      break;
    case 'back':
      await handleSearchBackCallback(ctx);
      break;
    case 'noop':
      await ctx.answerCbQuery();
      break;
    default:
      await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  }
});

/**
 * Handle terms-related callbacks
 */
const termsCallbackHandler = asyncHandler(async (ctx) => {
  const callbackData = parseCallbackData(ctx.callbackQuery.data.replace('terms:', ''));
  
  switch (callbackData.t) {
    case 'page':
      await handleTermsPageCallback(ctx, callbackData);
      break;
    case 'select':
      await handleTermSelectCallback(ctx, callbackData);
      break;
    case 'noop':
      await ctx.answerCbQuery();
      break;
    default:
      await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  }
});

/**
 * Handle search type selection from main menu
 */
async function handleSearchTypeCallback(ctx, searchType) {
  let message;
  
  switch (searchType) {
    case 'composer':
      message = fmt`üîç ${bold('–ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—É')}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.

${italic('–ü—Ä–∏–º–µ—Ä—ã:')}
‚Ä¢ –ë–∞—Ö
‚Ä¢ Mozart  
‚Ä¢ –ß–∞–π–∫–æ–≤—Å–∫–∏–π
‚Ä¢ Rachmaninoff`;
      break;
    case 'work':
      message = fmt`üéº ${bold('–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é')}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞.

${italic('–ü—Ä–∏–º–µ—Ä—ã:')}
‚Ä¢ –°–æ–Ω–∞—Ç–∞
‚Ä¢ –≠—Ç—é–¥
‚Ä¢ –°–∏–º—Ñ–æ–Ω–∏—è
‚Ä¢ –ö–æ–Ω—Ü–µ—Ä—Ç`;
      break;
    case 'terms':
      message = fmt`üìö ${bold('–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤')}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞.

${italic('–ü—Ä–∏–º–µ—Ä—ã:')}
‚Ä¢ –∞–∫–∫–æ—Ä–¥
‚Ä¢ —Ç–µ–º–ø
‚Ä¢ –º–æ–¥—É–ª—è—Ü–∏—è
‚Ä¢ —Ñ–æ—Ä—Ç–µ`;
      break;
  }
  
  // Set waiting state
  ctx.session.waitingForSearch = searchType;
  
  await ctx.editMessageText(message, createMainMenuKeyboard());
  await ctx.answerCbQuery();
}

/**
 * Handle search results pagination
 */
async function handleSearchPageCallback(ctx, callbackData) {
  ctx.session.currentPage = callbackData.page || 0;
  await displaySearchResults(ctx);
  await ctx.answerCbQuery();
}

/**
 * Handle search result selection
 */
async function handleSearchSelectCallback(ctx, callbackData) {
  const { searchResults } = ctx.session;
  const work = searchResults[callbackData.index];
  
  if (!work) {
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return;
  }
  
  const loadingMsg = await ctx.editMessageText(
    fmt`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏...`
  );
  
  try {
    // Get files for this work
    const files = await getWorkFiles(work.composer, work.title);
    
    const message = fmt`üéº ${bold(work.title)}
${italic('–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä:')} ${work.composer}

${files.length > 0 ? bold('üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:') : bold('‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')}`;

    const keyboard = createWorkDetailsKeyboard(work, files);
    
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      loadingMsg.message_id,
      undefined,
      message,
      keyboard
    );
    
    await ctx.answerCbQuery();
    
  } catch (error) {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      loadingMsg.message_id,
      undefined,
      fmt`‚ùå ${bold('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤')}
${error.message}`,
      createMainMenuKeyboard()
    );
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
  }
}

/**
 * Handle back to search menu
 */
async function handleSearchMenuCallback(ctx) {
  const message = fmt`üîç ${bold('–ü–æ–∏—Å–∫ –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ')}

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üéµ –ü–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—É', callback_data: 'search:{"a":"search","t":"composer"}' },
        { text: 'üéº –ü–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é', callback_data: 'search:{"a":"search","t":"work"}' }
      ],
      [
        { text: 'üìö –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã', callback_data: 'search:{"a":"search","t":"terms"}' },
        { text: 'üìÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤', callback_data: '{"a":"browse","t":"start"}' }
      ],
      [
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: '{"a":"main","t":"menu"}' }
      ]
    ]
  };

  await ctx.editMessageText(message, { reply_markup: keyboard });
  await ctx.answerCbQuery();
}

/**
 * Handle back to search results
 */
async function handleSearchBackCallback(ctx) {
  await displaySearchResults(ctx);
  await ctx.answerCbQuery();
}

/**
 * Handle terms pagination
 */
async function handleTermsPageCallback(ctx, callbackData) {
  ctx.session.currentPage = callbackData.page || 0;
  await displayTermResults(ctx);
  await ctx.answerCbQuery();
}

/**
 * Handle term selection (show full definition)
 */
async function handleTermSelectCallback(ctx, callbackData) {
  const { searchResults } = ctx.session;
  const term = searchResults[callbackData.index];
  
  if (!term) {
    await ctx.answerCbQuery('–¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const message = fmt`üìö ${bold(term.term)}

${term.description}`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞', callback_data: 'terms:{"a":"terms","t":"back"}' }
      ],
      [
        { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search:{"a":"search","t":"menu"}' }
      ]
    ]
  };

  await ctx.editMessageText(message, { reply_markup: keyboard });
  await ctx.answerCbQuery();
}

export { searchCallbackHandler, termsCallbackHandler };