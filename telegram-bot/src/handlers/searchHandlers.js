import { fmt, bold, italic, link } from 'telegraf/format';
import { getWorkFiles, getFileDownloadUrl } from '../services/api.js';
import { asyncHandler } from '../utils/errorHandler.js';
import { parseCallbackData, createWorkDetailsKeyboard, createMainMenuKeyboard } from '../utils/keyboards.js';
import { displaySearchResults, displayTermResults } from '../commands/search.js';
import { formatWork, paginate } from '../utils/formatting.js';

/**
 * Register search callback handlers
 * @param {Object} bot - Telegraf bot instance
 */
export function searchHandlers(bot) {
  bot.action(/^search:/, searchCallbackHandler);
  bot.action(/^terms:/, termsCallbackHandler);
  // Add handlers for new JSON format
  bot.action(/^{.*"a":"search"/, (ctx) => {
    const callbackData = JSON.parse(ctx.callbackQuery.data);
    return searchCallbackHandler(ctx, callbackData);
  });
  bot.action(/^{.*"a":"terms"/, (ctx) => {
    const callbackData = JSON.parse(ctx.callbackQuery.data);
    return termsCallbackHandler(ctx, callbackData);
  });
}

/**
 * Handle search-related callbacks
 */
export const searchCallbackHandler = asyncHandler(async (ctx, callbackData = null) => {
  // Handle both direct callback data objects and string parsing
  let data = callbackData;
  if (!data) {
    data = parseCallbackData(ctx.callbackQuery.data.replace('search:', ''));
  }
  
  console.log('Search callback handler called with data:', data);
  
  switch (data.t) {
    case 'composer':
      await handleSearchTypeCallback(ctx, 'composer');
      break;
    case 'work':
      await handleSearchTypeCallback(ctx, 'work');
      break;
    case 'terms':
      await handleSearchTypeCallback(ctx, 'terms');
      break;
    case 'page':
      await handleSearchPageCallback(ctx, data);
      break;
    case 'select':
      await handleSearchSelectCallback(ctx, data);
      break;
    case 'menu':
      await handleSearchMenuCallback(ctx);
      break;
    case 'back':
      await handleSearchBackCallback(ctx);
      break;
    case 'noop':
      await ctx.answerCbQuery();
      break;
    default:
      console.log('Unknown search action:', data.t);
      await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  }
});

/**
 * Handle terms-related callbacks
 */
export const termsCallbackHandler = asyncHandler(async (ctx, callbackData = null) => {
  let data = callbackData;
  if (!data) {
    data = parseCallbackData(ctx.callbackQuery.data.replace('terms:', ''));
  }
  
  switch (data.t) {
    case 'page':
      await handleTermsPageCallback(ctx, data);
      break;
    case 'select':
      await handleTermSelectCallback(ctx, data);
      break;
    case 'noop':
      await ctx.answerCbQuery();
      break;
    default:
      await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  }
});

/**
 * Handle search type selection from main menu
 */
async function handleSearchTypeCallback(ctx, searchType) {
  let message;
  
  switch (searchType) {
    case 'composer':
      message = `üîç **–ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—É**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n*–ü—Ä–∏–º–µ—Ä—ã:*\n‚Ä¢ –ë–∞—Ö\n‚Ä¢ Mozart\n‚Ä¢ –ß–∞–π–∫–æ–≤—Å–∫–∏–π\n‚Ä¢ Rachmaninoff`;
      break;
    case 'work':
      message = `üéº **–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n*–ü—Ä–∏–º–µ—Ä—ã:*\n‚Ä¢ –°–æ–Ω–∞—Ç–∞\n‚Ä¢ –≠—Ç—é–¥\n‚Ä¢ –°–∏–º—Ñ–æ–Ω–∏—è\n‚Ä¢ –ö–æ–Ω—Ü–µ—Ä—Ç`;
      break;
    case 'terms':
      message = `üìö **–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n*–ü—Ä–∏–º–µ—Ä—ã:*\n‚Ä¢ –∞–∫–∫–æ—Ä–¥\n‚Ä¢ —Ç–µ–º–ø\n‚Ä¢ –º–æ–¥—É–ª—è—Ü–∏—è\n‚Ä¢ —Ñ–æ—Ä—Ç–µ`;
      break;
  }
  
  // Set waiting state
  ctx.session.waitingForSearch = searchType;
  
  await ctx.editMessageText(message, {
    reply_markup: createMainMenuKeyboard().inline_keyboard,
    parse_mode: 'Markdown'
  });
  await ctx.answerCbQuery();
}

/**
 * Handle search results pagination
 */
async function handleSearchPageCallback(ctx, callbackData) {
  ctx.session.currentPage = callbackData.page || 0;
  await displaySearchResults(ctx);
  await ctx.answerCbQuery();
}

/**
 * Handle search result selection
 */
async function handleSearchSelectCallback(ctx, callbackData) {
  const { searchResults } = ctx.session;
  const work = searchResults[callbackData.index];
  
  if (!work) {
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return;
  }
  
  const loadingMsg = await ctx.editMessageText(
    `üîç –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏...`
  );
  
  try {
    // Get files for this work
    const files = await getWorkFiles(work.composer, work.title);
    
    if (files.length === 0) {
      const message = `üéº **${work.title}**\n*–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä:* ${work.composer}\n\n‚ùå **–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**`;
      const keyboard = {
        inline_keyboard: [
          [{ text: '‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞', callback_data: '{"a":"search","t":"back"}' }]
        ]
      };
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        loadingMsg.message_id,
        undefined,
        message,
        { reply_markup: keyboard, parse_mode: 'Markdown' }
      );
    } else if (files.length === 1) {
      // Single file: send directly
      const file = files[0];
      const downloadUrl = getFileDownloadUrl(file.pdf_path);
      const fileName = file.pdf_path?.split('/').pop() || 'file';
      
      const message = `üéº **${work.title}**\n*–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä:* ${work.composer}\n\nüìÑ **–§–∞–π–ª:** ${fileName}\n\n[üìÖ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª](${downloadUrl})\n\n*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è*`;
      
      const keyboard = {
        inline_keyboard: [
          [{ text: '‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞', callback_data: '{"a":"search","t":"back"}' }]
        ]
      };
      
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        loadingMsg.message_id,
        undefined,
        message,
        {
          reply_markup: keyboard,
          parse_mode: 'Markdown',
          disable_web_page_preview: false
        }
      );
    } else {
      // Multiple files: show selection buttons
      const message = `üéº **${work.title}**\n*–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä:* ${work.composer}\n\nüìÅ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã (${files.length}):**`;
      const keyboard = createWorkDetailsKeyboard(work, files);
      
      await ctx.telegram.editMessageText(
        ctx.chat.id,
        loadingMsg.message_id,
        undefined,
        message,
        { reply_markup: keyboard, parse_mode: 'Markdown' }
      );
    }
    
    await ctx.answerCbQuery();
    
  } catch (error) {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      loadingMsg.message_id,
      undefined,
      `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤**\n${error.message}`,
      { reply_markup: createMainMenuKeyboard(), parse_mode: 'Markdown' }
    );
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
  }
}

/**
 * Handle back to search menu
 */
async function handleSearchMenuCallback(ctx) {
  const message = `üîç **–ü–æ–∏—Å–∫ –≤ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üéµ –ü–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—É', callback_data: '{"a":"search","t":"composer"}' },
        { text: 'üéº –ü–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é', callback_data: '{"a":"search","t":"work"}' }
      ],
      [
        { text: 'üìö –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã', callback_data: '{"a":"search","t":"terms"}' },
        { text: 'üìÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤', callback_data: '{"a":"browse","t":"start"}' }
      ],
      [
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: '{"a":"main","t":"menu"}' }
      ]
    ]
  };

  await ctx.editMessageText(message, { 
    reply_markup: keyboard,
    parse_mode: 'Markdown'
  });
  await ctx.answerCbQuery();
}

/**
 * Handle back to search results
 */
async function handleSearchBackCallback(ctx) {
  await displaySearchResults(ctx);
  await ctx.answerCbQuery();
}

/**
 * Handle terms pagination
 */
async function handleTermsPageCallback(ctx, callbackData) {
  ctx.session.currentPage = callbackData.page || 0;
  await displayTermResults(ctx);
  await ctx.answerCbQuery();
}

/**
 * Handle term selection (show full definition)
 */
async function handleTermSelectCallback(ctx, callbackData) {
  const { searchResults } = ctx.session;
  const term = searchResults[callbackData.index];
  
  if (!term) {
    await ctx.answerCbQuery('–¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const message = `üìö **${term.term}**\n\n${term.description}`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞', callback_data: '{"a":"terms","t":"back"}' }
      ],
      [
        { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: '{"a":"search","t":"menu"}' }
      ]
    ]
  };

  await ctx.editMessageText(message, { 
    reply_markup: keyboard,
    parse_mode: 'Markdown'
  });
  await ctx.answerCbQuery();
}

