import { Telegraf, session } from 'telegraf';
import { message } from 'telegraf/filters';
import dotenv from 'dotenv';
import { startCommand, mainMenuCallback } from './commands/start.js';
import { helpCommand } from './commands/help.js';
import { statsCommand } from './commands/stats.js';
import { searchCommands } from './commands/search.js';
import { fileNavigation } from './handlers/fileNavigation.js';
import { searchHandlers } from './handlers/searchHandlers.js';
import { errorHandler } from './utils/errorHandler.js';
import { testDatabaseConnection, closeDatabaseConnection } from './services/database.js';

// Load environment variables
dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN is required in .env file');
  process.exit(1);
}

// Create bot instance
const bot = new Telegraf(BOT_TOKEN);

// Session middleware for navigation state (simplified)
bot.use(session());

// Error handling middleware
bot.catch(errorHandler);

// Add debugging middleware
bot.use(async (ctx, next) => {
  console.log('Received update:', {
    type: ctx.updateType,
    message: ctx.message?.text,
    from: ctx.from?.first_name
  });
  await next();
});

// Commands with direct error handling
bot.command('start', async (ctx) => {
  console.log('Start command received from:', ctx.from?.first_name);
  try {
    await ctx.reply('üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
  } catch (error) {
    console.error('Error in start command:', error);
  }
});
bot.command('help', async (ctx) => {
  console.log('Help command received from:', ctx.from?.first_name);
  try {
    await ctx.reply('üÜò –ü–æ–º–æ—â—å\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n/test - —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã\n/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞');
  } catch (error) {
    console.error('Error in help command:', error);
  }
});
bot.command('stats', async (ctx) => {
  console.log('Stats command received from:', ctx.from?.first_name);
  try {
    await ctx.reply('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.');
  } catch (error) {
    console.error('Error in stats command:', error);
  }
});

// Search commands (temporarily disabled for debugging)
// searchCommands(bot);

// Add a simple test command
bot.command('test', async (ctx) => {
  console.log('Test command received!');
  try {
    await ctx.reply('‚úÖ Bot is working! Test command successful.');
  } catch (error) {
    console.error('Error in test command:', error);
  }
});

// Callback query handlers for navigation (temporarily disabled for debugging)
// fileNavigation(bot);
// searchHandlers(bot);

// Text message handlers
bot.on(message('text'), async (ctx) => {
  const text = ctx.message.text;
  console.log('Text message received:', text, 'from:', ctx.from?.first_name);
  
  // Skip commands
  if (text.startsWith('/')) {
    console.log('Command detected, should be handled by command handler');
    return;
  }
  
  // Treat regular text as search query
  await ctx.reply(
    'üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
    '/search_composer <–∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞>\n' +
    '/search_work <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è>\n' +
    '/search_term <–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω>\n' +
    '/browse - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤\n\n' +
    '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏'
  );
});

// Launch bot
async function startBot() {
  console.log('ü§ñ Starting Music Library Telegram Bot...');
  console.log('üîë BOT_TOKEN length:', BOT_TOKEN ? BOT_TOKEN.length : 'undefined');
  console.log('üîë BOT_TOKEN starts with:', BOT_TOKEN ? BOT_TOKEN.substring(0, 10) + '...' : 'undefined');

  // Test database connection (temporarily disabled for debugging)
  console.log('üíæ Skipping database connection test for debugging...');
  const dbConnected = false;
  // const dbConnected = await testDatabaseConnection();
  if (!dbConnected) {
    console.warn('‚ö†Ô∏è  Database connection skipped for debugging');
  } else {
    console.log('‚úÖ Database connection successful');
  }

  console.log('üöÄ Launching bot...');
  try {
    await bot.launch({
      dropPendingUpdates: true
    });
    console.log('‚úÖ Bot started successfully!');
    console.log('üéµ Ready to help users search music library');
    console.log('üíæ Database connection:', dbConnected ? 'OK' : 'FAILED');
  } catch (error) {
    console.error('‚ùå Failed to start bot:', error.message);
    console.error('Error details:', error);
    process.exit(1);
  }
}

startBot();

// Graceful shutdown
process.once('SIGINT', async () => {
  console.log('üõë Received SIGINT, shutting down gracefully...');
  await closeDatabaseConnection();
  bot.stop('SIGINT');
});

process.once('SIGTERM', async () => {
  console.log('üõë Received SIGTERM, shutting down gracefully...');
  await closeDatabaseConnection();
  bot.stop('SIGTERM');
});

export default bot;