"""
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Telegram –±–æ—Ç–∞
"""

from typing import List, Dict, Any, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π", callback_data="search_works"),
            InlineKeyboardButton(text="üìö –ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤", callback_data="search_terms")
        ],
        [
            InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
            InlineKeyboardButton(text="üë®‚Äçüéº –ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä—ã", callback_data="composers")
        ],
        [
            InlineKeyboardButton(text="üìÅ –ú–æ–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_collections"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ],
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ]
    ])
    
    return keyboard


def auth_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîê –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", callback_data="login"),
            InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")
        ],
        [
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="search_guest")
        ]
    ])
    
    return keyboard


def search_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéµ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", callback_data="search_type_works"),
            InlineKeyboardButton(text="üìö –¢–µ—Ä–º–∏–Ω—ã", callback_data="search_type_terms")
        ],
        [
            InlineKeyboardButton(text="üë®‚Äçüéº –ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä—ã", callback_data="search_type_composers"),
            InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="search_type_categories")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ])
    
    return keyboard


def work_details_keyboard(work_id: int, in_collection: bool = False, 
                         collection_id: Optional[int] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏"""
    
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
    action_row = [
        InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"download_work_{work_id}"),
        InlineKeyboardButton(text="üñºÔ∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞", callback_data=f"thumbnail_{work_id}")
    ]
    buttons.append(action_row)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
    if in_collection and collection_id:
        collection_row = [
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏", 
                               callback_data=f"remove_from_collection_{collection_id}_{work_id}")
        ]
    else:
        collection_row = [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é", 
                               callback_data=f"add_to_collection_{work_id}")
        ]
    buttons.append(collection_row)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    additional_row = [
        InlineKeyboardButton(text="üë®‚Äçüéº –î—Ä—É–≥–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", 
                           callback_data=f"composer_works_{work_id}"),
        InlineKeyboardButton(text="üìÇ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", 
                           callback_data=f"category_works_{work_id}")
    ]
    buttons.append(additional_row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = [
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_search")
    ]
    buttons.append(nav_row)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def search_results_keyboard(results: List[Dict[str, Any]], page: int = 1, 
                          total_pages: int = 1, search_query: str = "") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    buttons = []
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–ø–æ 2 –≤ —Ä—è–¥)
    for i in range(0, len(results), 2):
        row = []
        for j in range(2):
            if i + j < len(results):
                work = results[i + j]
                work_id = work.get("id")
                title = work.get("work_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                composer = work.get("composer", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                button_text = f"{title[:15]}... - {composer[:10]}..."
                if len(title) <= 15:
                    button_text = f"{title} - {composer[:15]}..."
                
                row.append(InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"work_details_{work_id}"
                ))
        
        if row:
            buttons.append(row)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        nav_row = []
        
        if page > 1:
            nav_row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", 
                callback_data=f"search_page_{page-1}_{search_query}"
            ))
        
        nav_row.append(InlineKeyboardButton(
            text=f"üìÑ {page}/{total_pages}",
            callback_data="current_page"
        ))
        
        if page < total_pages:
            nav_row.append(InlineKeyboardButton(
                text="–°–ª–µ–¥. ‚û°Ô∏è",
                callback_data=f"search_page_{page+1}_{search_query}"
            ))
        
        buttons.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    actions_row = [
        InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"),
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ]
    buttons.append(actions_row)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def collections_keyboard(collections: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
    
    buttons = []
    
    # –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for collection in collections:
        collection_id = collection.get("id")
        name = collection.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        is_public = collection.get("is_public", False)
        
        icon = "üåê" if is_public else "üîí"
        button_text = f"{icon} {name[:30]}..."
        
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"collection_details_{collection_id}"
        )])
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
    actions_row = [
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="create_collection"),
        InlineKeyboardButton(text="üåê –ü—É–±–ª–∏—á–Ω—ã–µ", callback_data="public_collections")
    ]
    buttons.append(actions_row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = [
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ]
    buttons.append(nav_row)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def collection_details_keyboard(collection_id: int, is_owner: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    
    buttons = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    main_row = [
        InlineKeyboardButton(text="üìã –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", 
                           callback_data=f"collection_works_{collection_id}"),
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏", 
                           callback_data=f"search_in_collection_{collection_id}")
    ]
    buttons.append(main_row)
    
    # –î–µ–π—Å—Ç–≤–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if is_owner:
        owner_row = [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                               callback_data=f"edit_collection_{collection_id}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", 
                               callback_data=f"delete_collection_{collection_id}")
        ]
        buttons.append(owner_row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = [
        InlineKeyboardButton(text="üîô –ú–æ–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="my_collections")
    ]
    buttons.append(nav_row)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def categories_keyboard(categories: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    
    buttons = []
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    for i in range(0, len(categories), 2):
        row = []
        for j in range(2):
            if i + j < len(categories):
                category = categories[i + j]
                category_name = category.get("category", "")
                works_count = category.get("count", 0)
                
                button_text = f"üìÇ {category_name} ({works_count})"
                if len(button_text) > 30:
                    button_text = f"üìÇ {category_name[:20]}... ({works_count})"
                
                row.append(InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"category_{category_name}"
                ))
        
        if row:
            buttons.append(row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = [
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ]
    buttons.append(nav_row)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def settings_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications"),
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="settings_search")
        ],
        [
            InlineKeyboardButton(text="üìÑ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", callback_data="settings_pagination"),
            InlineKeyboardButton(text="üåê –Ø–∑—ã–∫", callback_data="settings_language")
        ],
        [
            InlineKeyboardButton(text="üì± –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account")
        ],
        [
            InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])
    
    return keyboard


def confirmation_keyboard(action: str, item_id: Optional[str] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    
    callback_confirm = f"confirm_{action}"
    callback_cancel = f"cancel_{action}"
    
    if item_id:
        callback_confirm += f"_{item_id}"
        callback_cancel += f"_{item_id}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=callback_confirm),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=callback_cancel)
        ]
    ])
    
    return keyboard


def back_button(callback_data: str = "main_menu") -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ])
    
    return keyboard


def pagination_keyboard(current_page: int, total_pages: int, 
                       callback_prefix: str) -> InlineKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    
    buttons = []
    
    nav_row = []
    
    if current_page > 1:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=f"{callback_prefix}_{current_page-1}"
        ))
    
    nav_row.append(InlineKeyboardButton(
        text=f"{current_page}/{total_pages}",
        callback_data="current_page"
    ))
    
    if current_page < total_pages:
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è",
            callback_data=f"{callback_prefix}_{current_page+1}"
        ))
    
    buttons.append(nav_row)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)