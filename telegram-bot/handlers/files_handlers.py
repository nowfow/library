"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from loguru import logger
import aiohttp
import aiofiles
import os
import tempfile

from models.user import User
from services.api_client import api_client
from keyboards.inline import main_menu_keyboard
from utils.validators import sanitize_filename

router = Router()


@router.callback_query(F.data.startswith("download_work_"))
async def download_work(callback: CallbackQuery, user: User):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
    
    try:
        work_id = int(callback.data.split("_")[-1])
        
        await callback.answer()
        await callback.message.edit_text("üì• –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
        work_response = await api_client.get_work_by_id(work_id, user.jwt_token)
        
        if not work_response or work_response.get("error"):
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=main_menu_keyboard()
            )
            return
        
        work_data = work_response.get("data", work_response)
        file_path = work_data.get("file_path")
        work_title = work_data.get("work_title", "Unknown")
        composer = work_data.get("composer", "Unknown")
        
        if not file_path:
            await callback.message.edit_text(
                "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=main_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_url = await api_client.download_file_url(file_path, user.jwt_token)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.gettempdir()
        safe_filename = sanitize_filename(f"{composer} - {work_title}.pdf")
        temp_file_path = os.path.join(temp_dir, safe_filename)
        
        try:
            session = await api_client._get_session()
            async with session.get(download_url) as response:
                if response.status == 200:
                    async with aiofiles.open(temp_file_path, 'wb') as f:
                        async for chunk in response.content.iter_chunked(8192):
                            await f.write(chunk)
                else:
                    await callback.message.edit_text(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞",
                        reply_markup=main_menu_keyboard()
                    )
                    return
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞",
                reply_markup=main_menu_keyboard()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            document = FSInputFile(temp_file_path, filename=safe_filename)
            
            caption = f"üéµ <b>{work_title}</b>\nüë®‚Äçüéº {composer}"
            
            await callback.message.answer_document(
                document=document,
                caption=caption,
                reply_markup=main_menu_keyboard()
            )
            
            await callback.message.edit_text(
                f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: <b>{work_title}</b>",
                reply_markup=main_menu_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {safe_filename}: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞",
                reply_markup=main_menu_keyboard()
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_file_path)
            except:
                pass
        
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ work_id: {callback.data} | {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
            reply_markup=main_menu_keyboard()
        )


@router.callback_query(F.data.startswith("thumbnail_"))
async def get_thumbnail(callback: CallbackQuery, user: User):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
    
    try:
        work_id = int(callback.data.split("_")[-1])
        
        await callback.answer("üñºÔ∏è –ü–æ–ª—É—á–∞—é –º–∏–Ω–∏–∞—Ç—é—Ä—É...")
        
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã
        await callback.message.answer(
            "üñºÔ∏è –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã")