"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∏ —Ç–µ—Ä–º–∏–Ω–æ–≤
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from loguru import logger

from models.user import User
from services.api_client import api_client
from keyboards.inline import (
    search_type_keyboard, search_results_keyboard, 
    work_details_keyboard, main_menu_keyboard
)
from keyboards.reply import main_menu_reply
from utils.formatters import (
    format_search_results, format_work_info, 
    format_error_message, truncate_text
)
from utils.validators import validate_search_query, clean_search_query

router = Router()


# –ö–æ–º–∞–Ω–¥–∞ /search
@router.message(Command("search"))
async def cmd_search(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    query = message.text[8:].strip()  # –£–±–∏—Ä–∞–µ–º "/search "
    
    if not query:
        await message.answer(
            "üîç <b>–ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –ò–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞\n"
            "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/search Mozart –∫–æ–Ω—Ü–µ—Ä—Ç</code>",
            reply_markup=search_type_keyboard()
        )
        return
    
    await perform_search(message, query, user)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data == "search_works")
@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def search_works_button(event, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π"""
    
    text = (
        "üîç <b>–ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –ò–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞\n"
        "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –¥–æ–ø—É—Å–∫–∞—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
    )
    
    keyboard = search_type_keyboard()
    
    if hasattr(event, 'answer'):  # CallbackQuery
        await event.answer()
        await event.message.edit_text(text, reply_markup=keyboard)
    else:  # Message
        await event.answer(text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∏–ø—É
@router.callback_query(F.data.startswith("search_type_"))
async def search_by_type(callback: CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∏–ø—É"""
    
    search_type = callback.data.split("_")[-1]
    
    type_descriptions = {
        "works": "üéµ <b>–ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞:",
        "composers": "üë®‚Äçüéº <b>–ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–æ–≤</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞:",
        "categories": "üìÇ <b>–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        "terms": "üìö <b>–ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤</b>\n\n–í–≤–µ–¥–∏—Ç–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω:"
    }
    
    text = type_descriptions.get(search_type, "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    
    await callback.answer()
    await callback.message.edit_text(text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM)
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(F.text.regexp(r'^[^/].*'))
async def universal_search(message: Message, user: User):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
    if message.text in ["üîç –ü–æ–∏—Å–∫", "üìö –¢–µ—Ä–º–∏–Ω—ã", "üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏–∏", "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", 
                       "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    
    query = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    is_valid, error_msg = validate_search_query(query)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}")
        return
    
    await perform_search(message, query, user)


async def perform_search(message: Message, query: str, user: User, page: int = 1):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π"""
    
    # –û—á–∏—â–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    clean_query = clean_search_query(query)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer("üîç –ò—â—É –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        response = await api_client.smart_search_works(
            query=clean_query,
            page=page,
            limit=user.items_per_page,
            jwt_token=user.jwt_token
        )
        
        if not response:
            await loading_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º",
                reply_markup=main_menu_keyboard()
            )
            return
        
        if response.get("error"):
            error_text = format_error_message(
                response.get("error", "unknown"),
                response.get("message", "")
            )
            await loading_msg.edit_text(
                error_text,
                reply_markup=main_menu_keyboard()
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = response.get("results", [])
        total = response.get("total", 0)
        current_page = response.get("pagination", {}).get("page", page)
        total_pages = response.get("pagination", {}).get("total_pages", 1)
        
        if not results:
            await loading_msg.edit_text(
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É <b>'{query}'</b> –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ",
                reply_markup=search_type_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = format_search_results(results, query, current_page, total)
        results_text = truncate_text(results_text)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = search_results_keyboard(
            results=results,
            page=current_page,
            total_pages=total_pages,
            search_query=query
        )
        
        await loading_msg.edit_text(
            results_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data.startswith("search_page_"))
async def search_pagination(callback: CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    try:
        parts = callback.data.split("_")
        page = int(parts[2])
        query = "_".join(parts[3:])  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        
        await callback.answer()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await perform_search_callback(callback, query, user, page)
        
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback –¥–∞–Ω–Ω—ã—Ö: {callback.data} | {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")


async def perform_search_callback(callback: CallbackQuery, query: str, user: User, page: int = 1):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–∞"""
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫
        response = await api_client.smart_search_works(
            query=query,
            page=page,
            limit=user.items_per_page,
            jwt_token=user.jwt_token
        )
        
        if not response or response.get("error"):
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                reply_markup=main_menu_keyboard()
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = response.get("results", [])
        total = response.get("total", 0)
        current_page = response.get("pagination", {}).get("page", page)
        total_pages = response.get("pagination", {}).get("total_pages", 1)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = format_search_results(results, query, current_page, total)
        results_text = truncate_text(results_text)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = search_results_keyboard(
            results=results,
            page=current_page,
            total_pages=total_pages,
            search_query=query
        )
        
        await callback.message.edit_text(
            results_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ callback –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ",
            reply_markup=main_menu_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
@router.callback_query(F.data.startswith("work_details_"))
async def work_details(callback: CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
    
    try:
        work_id = int(callback.data.split("_")[-1])
        
        await callback.answer()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
        response = await api_client.get_work_by_id(work_id, user.jwt_token)
        
        if not response or response.get("error"):
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=main_menu_keyboard()
            )
            return
        
        work_data = response
        if "data" in response:
            work_data = response["data"]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
        work_text = format_work_info(work_data, show_full=True)
        work_text = truncate_text(work_text)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = work_details_keyboard(work_id)
        
        await callback.message.edit_text(
            work_text,
            reply_markup=keyboard
        )
        
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ work_id: {callback.data} | {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
            reply_markup=main_menu_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
@router.callback_query(F.data == "new_search")
async def new_search(callback: CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    await callback.answer()
    await callback.message.edit_text(
        "üîç <b>–ù–æ–≤—ã–π –ø–æ–∏—Å–∫</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
        reply_markup=search_type_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∏—Å–∫—É
@router.callback_query(F.data == "back_to_search")
async def back_to_search(callback: CallbackQuery, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"""
    
    await callback.answer()
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
        reply_markup=search_type_keyboard()
    )


# –ö–æ–º–∞–Ω–¥–∞ /composer
@router.message(Command("composer"))
async def cmd_composer(message: Message, user: User):
    """–ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞"""
    
    composer_name = message.text[10:].strip()  # –£–±–∏—Ä–∞–µ–º "/composer "
    
    if not composer_name:
        await message.answer(
            "üë®‚Äçüéº <b>–ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä—É</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞:\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/composer Mozart</code>"
        )
        return
    
    await search_composer_works(message, composer_name, user)


async def search_composer_works(message: Message, composer_name: str, user: User):
    """–ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞"""
    
    loading_msg = await message.answer(f"üîç –ò—â—É –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ {composer_name}...")
    
    try:
        # –ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞
        response = await api_client.smart_search_works(
            query=composer_name,
            page=1,
            limit=user.items_per_page,
            jwt_token=user.jwt_token
        )
        
        if not response or response.get("error"):
            await loading_msg.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ '{composer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=main_menu_keyboard()
            )
            return
        
        results = response.get("results", [])
        
        if not results:
            await loading_msg.edit_text(
                f"üîç –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ <b>{composer_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –∏–º–µ–Ω–∏\n"
                "‚Ä¢ –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ /search",
                reply_markup=search_type_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = format_search_results(results, f"–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä: {composer_name}", 1, len(results))
        results_text = truncate_text(results_text)
        
        keyboard = search_results_keyboard(
            results=results,
            page=1,
            total_pages=1,
            search_query=composer_name
        )
        
        await loading_msg.edit_text(
            results_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ '{composer_name}': {e}")
        await loading_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ '{composer_name}'",
            reply_markup=main_menu_keyboard()
        )