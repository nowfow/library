"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from loguru import logger

from models.user import User
from services.api_client import api_client
from keyboards.inline import main_menu_keyboard, settings_keyboard
from utils.formatters import format_stats

router = Router()


@router.callback_query(F.data == "settings")
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def bot_settings(event, user: User):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    
    text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\nüöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    
    if hasattr(event, 'answer'):  # CallbackQuery
        await event.answer()
        await event.message.edit_text(text, reply_markup=settings_keyboard())
    else:  # Message
        await event.answer(text, reply_markup=settings_keyboard())


@router.callback_query(F.data == "stats")
@router.message(Command("stats"))
async def show_stats(event, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    
    if hasattr(event, 'answer'):  # CallbackQuery
        await event.answer()
        await event.message.edit_text("üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    else:  # Message
        loading_msg = await event.answer("üìä –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π
        stats_response = await api_client.get_works_stats(user.jwt_token)
        
        if stats_response and not stats_response.get("error"):
            stats_text = format_stats(stats_response)
        else:
            stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏</b>\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
        
        if hasattr(event, 'answer'):  # CallbackQuery
            await event.message.edit_text(stats_text, reply_markup=main_menu_keyboard())
        else:  # Message
            await loading_msg.edit_text(stats_text, reply_markup=main_menu_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        error_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏</b>\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        if hasattr(event, 'answer'):  # CallbackQuery
            await event.message.edit_text(error_text, reply_markup=main_menu_keyboard())
        else:  # Message
            await loading_msg.edit_text(error_text, reply_markup=main_menu_keyboard())


@router.callback_query(F.data == "main_menu")
@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, user: User):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    
    await callback.answer()
    
    if user.is_authenticated:
        text = f"üéº <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!"
        keyboard = main_menu_keyboard()
    else:
        text = "üéº <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        from keyboards.inline import auth_keyboard
        keyboard = auth_keyboard()
    
    await callback.message.edit_text(text, reply_markup=keyboard)