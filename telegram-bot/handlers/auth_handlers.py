"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from models.user import User
from services.api_client import api_client
from middleware.auth import auth_middleware
from keyboards.inline import main_menu_keyboard, auth_keyboard
from keyboards.reply import main_menu_reply, auth_menu_reply, cancel_reply, remove_keyboard
from utils.formatters import format_user_info, format_error_message
from utils.validators import validate_email, validate_password, validate_name

router = Router()


class AuthStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    waiting_for_email = State()
    waiting_for_password = State()
    waiting_for_name = State()
    waiting_for_confirm_password = State()


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ú—É–∑—ã–∫–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –Ω–æ—Ç –≤–∞–ª—Ç–æ—Ä–Ω—ã</b>!\n\n"
    
    if user.is_authenticated:
        welcome_text += f"üéµ –ü—Ä–∏–≤–µ—Ç, <b>{user.full_name}</b>!\n\n"
        welcome_text += (
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "üîç –ò—Å–∫–∞—Ç—å –Ω–æ—Ç—ã –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞–º –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º\n"
            "üìö –ò–∑—É—á–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã\n"
            "üìÅ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–æ—Ç\n"
            "üì• –°–∫–∞—á–∏–≤–∞—Ç—å PDF —Ñ–∞–π–ª—ã –ø—Ä—è–º–æ –≤ —á–∞—Ç\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        await message.answer(
            text=welcome_text,
            reply_markup=main_menu_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            "üéº –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
            reply_markup=main_menu_reply()
        )
    else:
        welcome_text += (
            "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
            "üîê <b>–° –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "üîç <b>–ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –∏ —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
            "‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(
            text=welcome_text,
            reply_markup=auth_keyboard()
        )
        
        await message.answer(
            "üéº –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=auth_menu_reply()
        )


# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def cmd_help(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    
    help_text = (
        "üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>\n\n"
        
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏\n\n"
        
        "üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:</b>\n"
        "/login - –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç\n"
        "/register - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
        "/logout - –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        
        "üîç <b>–ü–æ–∏—Å–∫:</b>\n"
        "/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π\n"
        "/composer <–∏–º—è> - –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞\n"
        "/term <—Ç–µ—Ä–º–∏–Ω> - –ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞\n"
        "/categories - –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n"
    )
    
    if user.is_authenticated:
        help_text += (
            "üìÅ <b>–ö–æ–ª–ª–µ–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö):</b>\n"
            "/collections - –ú–æ–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n"
            "/create_collection <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é\n\n"
        )
    
    help_text += (
        "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "‚Ä¢ –í –ø–æ–∏—Å–∫–µ –º–æ–∂–Ω–æ –¥–æ–ø—É—Å–∫–∞—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º\n"
        "‚Ä¢ –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø—Ä—è–º–æ –≤ —á–∞—Ç\n\n"
        
        "‚ùì <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    
    await message.answer(
        text=help_text,
        reply_markup=main_menu_keyboard() if user.is_authenticated else auth_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏"
@router.callback_query(F.data == "login")
@router.message(F.text.in_(["üîê –í–æ–π—Ç–∏", "üîê –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç"]))
async def process_login(event, state: FSMContext, user: User):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    if user.is_authenticated:
        text = f"üîê –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ <b>{user.full_name}</b>"
        
        if hasattr(event, 'answer'):  # CallbackQuery
            await event.answer()
            await event.message.edit_text(text, reply_markup=main_menu_keyboard())
        else:  # Message
            await event.answer(text, reply_markup=main_menu_keyboard())
        return
    
    text = (
        "üîê <b>–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:"
    )
    
    await state.set_state(AuthStates.waiting_for_email)
    
    if hasattr(event, 'answer'):  # CallbackQuery
        await event.answer()
        await event.message.edit_text(text)
        await event.message.answer("üìß –û–∂–∏–¥–∞—é email:", reply_markup=cancel_reply())
    else:  # Message
        await event.answer(text, reply_markup=cancel_reply())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email –¥–ª—è –≤—Ö–æ–¥–∞
@router.message(StateFilter(AuthStates.waiting_for_email))
async def process_email_login(message: Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –¥–ª—è –≤—Ö–æ–¥–∞"""
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå –í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=auth_menu_reply()
        )
        return
    
    email = message.text.strip().lower()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if not validate_email(email):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=cancel_reply()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(email=email)
    await state.set_state(AuthStates.waiting_for_password)
    
    await message.answer(
        f"üìß Email: <b>{email}</b>\n\nüîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
        reply_markup=cancel_reply()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞
@router.message(StateFilter(AuthStates.waiting_for_password))
async def process_password_login(message: Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞"""
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå –í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=auth_menu_reply()
        )
        return
    
    password = message.text
    data = await state.get_data()
    email = data.get("email")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    try:
        await message.delete()
    except:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ API
        response = await api_client.login_user(email, password)
        
        if response and not response.get("error"):
            # –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            user_data = response.get("user", {})
            token = response.get("token")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.jwt_token = token
            user.update_from_backend_user(user_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            await auth_middleware.save_user_session(user)
            
            await loading_msg.edit_text(
                f"‚úÖ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!</b>\n\n"
                f"üìß Email: {user.email}\n"
                f"‚≠ê –†–æ–ª—å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin() else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}",
                reply_markup=main_menu_keyboard()
            )
            
            await message.answer(
                "üéº –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
                reply_markup=main_menu_reply()
            )
            
        else:
            # –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞
            error_msg = response.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if response else "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
            
            await loading_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {error_msg}\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∏ –ø–∞—Ä–æ–ª—è.",
                reply_markup=auth_keyboard()
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {email}: {e}")
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=auth_keyboard()
        )
    
    finally:
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
@router.callback_query(F.data == "register")
@router.message(F.text.in_(["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"]))
async def process_register(event, state: FSMContext, user: User):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    if user.is_authenticated:
        text = f"üìù –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <b>{user.full_name}</b>"
        
        if hasattr(event, 'answer'):  # CallbackQuery
            await event.answer()
            await event.message.edit_text(text, reply_markup=main_menu_keyboard())
        else:  # Message
            await event.answer(text, reply_markup=main_menu_keyboard())
        return
    
    text = (
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:"
    )
    
    await state.set_state(AuthStates.waiting_for_email)
    await state.update_data(action="register")
    
    if hasattr(event, 'answer'):  # CallbackQuery
        await event.answer()
        await event.message.edit_text(text)
        await event.message.answer("üìß –û–∂–∏–¥–∞—é email:", reply_markup=cancel_reply())
    else:  # Message
        await event.answer(text, reply_markup=cancel_reply())


# –ö–æ–º–∞–Ω–¥–∞ /profile
@router.message(Command("profile"))
@router.callback_query(F.data == "profile")
async def cmd_profile(event, user: User):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if not user.is_authenticated:
        text = "üîê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        keyboard = auth_keyboard()
    else:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            response = await api_client.get_user_info(user.jwt_token)
            
            if response and not response.get("error"):
                user_data = response.get("user", {})
                text = format_user_info(user_data)
            else:
                text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è {user.telegram_id}: {e}")
            text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ"
        
        keyboard = main_menu_keyboard()
    
    if hasattr(event, 'answer'):  # CallbackQuery
        await event.answer()
        await event.message.edit_text(text, reply_markup=keyboard)
    else:  # Message
        await event.answer(text, reply_markup=keyboard)


# –ö–æ–º–∞–Ω–¥–∞ /logout
@router.message(Command("logout"))
@router.callback_query(F.data == "logout")
async def cmd_logout(event, user: User):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    if not user.is_authenticated:
        text = "üîê –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"
        keyboard = auth_keyboard()
    else:
        # –û—á–∏—â–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        user.jwt_token = None
        user.backend_user_id = None
        user.email = None
        user.name = None
        user.role = None
        user.is_authenticated = False
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
        from config.database import db_manager
        await db_manager.delete_user_session(user.telegram_id)
        
        text = f"üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, <b>{user.full_name}</b>!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞."
        keyboard = auth_keyboard()
    
    if hasattr(event, 'answer'):  # CallbackQuery
        await event.answer()
        await event.message.edit_text(text, reply_markup=keyboard)
        await event.message.answer("üéº –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=auth_menu_reply())
    else:  # Message
        await event.answer(text, reply_markup=keyboard)
        await event.answer("üéº –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=auth_menu_reply())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def process_cancel(message: Message, state: FSMContext, user: User):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    
    await state.clear()
    
    if user.is_authenticated:
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=main_menu_reply()
        )
    else:
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=auth_menu_reply()
        )