"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
"""

from typing import Dict, Any, List, Optional
from datetime import datetime


def format_work_info(work: Dict[str, Any], show_full: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏"""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    composer = work.get("composer", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä")
    title = work.get("work_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    category = work.get("category", "")
    subcategory = work.get("subcategory", "")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    text = f"üéµ <b>{title}</b>\n"
    text += f"üë®‚Äçüéº <b>–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä:</b> {composer}\n"
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    if category:
        category_text = category
        if subcategory:
            category_text += f" ‚Üí {subcategory}"
        text += f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_text}\n"
    
    if show_full:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        file_type = work.get("file_type", "").upper()
        if file_type:
            text += f"üìÑ <b>–¢–∏–ø —Ñ–∞–π–ª–∞:</b> {file_type}\n"
        
        file_size = work.get("file_size")
        if file_size:
            size_mb = round(file_size / (1024 * 1024), 2)
            text += f"üíæ <b>–†–∞–∑–º–µ—Ä:</b> {size_mb} –ú–ë\n"
        
        pages_count = work.get("pages_count")
        if pages_count:
            text += f"üìñ <b>–°—Ç—Ä–∞–Ω–∏—Ü:</b> {pages_count}\n"
        
        created_at = work.get("created_at")
        if created_at:
            try:
                date = datetime.fromisoformat(created_at.replace("Z", "+00:00"))
                text += f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {date.strftime('%d.%m.%Y')}\n"
            except:
                pass
    
    return text


def format_search_results(results: List[Dict[str, Any]], query: str, 
                         page: int = 1, total: int = 0) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    if not results:
        return f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É <b>'{query}'</b> –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    
    text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> '{query}'\n"
    
    if total > 0:
        text += f"üìä –ù–∞–π–¥–µ–Ω–æ: <b>{total}</b> –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π\n"
    
    text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{page}</b>\n\n"
    
    for i, work in enumerate(results, 1):
        composer = work.get("composer", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        title = work.get("work_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        category = work.get("category", "")
        
        text += f"{i}. <b>{title}</b>\n"
        text += f"   üë®‚Äçüéº {composer}"
        
        if category:
            text += f" | üìÇ {category}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
        similarity = work.get("similarity_score")
        if similarity and similarity > 0:
            text += f" | üéØ {int(similarity * 100)}%"
        
        text += "\n\n"
    
    return text


def format_term_info(term: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ä–º–∏–Ω–µ"""
    
    term_name = term.get("term", "")
    definition = term.get("definition", "")
    
    text = f"üìö <b>{term_name}</b>\n\n"
    text += f"{definition}"
    
    return text


def format_collection_info(collection: Dict[str, Any], works_count: Optional[int] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    
    name = collection.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    description = collection.get("description", "")
    is_public = collection.get("is_public", False)
    created_at = collection.get("created_at", "")
    
    text = f"üìÅ <b>{name}</b>\n"
    
    if description:
        text += f"üìù {description}\n"
    
    text += f"üîí {'–ü—É–±–ª–∏—á–Ω–∞—è' if is_public else '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è'}\n"
    
    if works_count is not None:
        text += f"üéµ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π: <b>{works_count}</b>\n"
    
    if created_at:
        try:
            date = datetime.fromisoformat(created_at.replace("Z", "+00:00"))
            text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {date.strftime('%d.%m.%Y')}\n"
        except:
            pass
    
    return text


def format_user_info(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    
    name = user_data.get("name", "")
    email = user_data.get("email", "")
    role = user_data.get("role", "user")
    created_at = user_data.get("created_at", "")
    
    text = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
    text += f"üìß <b>Email:</b> {email}\n"
    text += f"üè∑Ô∏è <b>–ò–º—è:</b> {name}\n"
    text += f"‚≠ê <b>–†–æ–ª—å:</b> {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if role == 'admin' else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
    
    if created_at:
        try:
            date = datetime.fromisoformat(created_at.replace("Z", "+00:00"))
            text += f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {date.strftime('%d.%m.%Y')}\n"
        except:
            pass
    
    return text


def format_stats(stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    totals = stats.get("totals", {})
    
    text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏</b>\n\n"
    
    works = totals.get("works", 0)
    composers = totals.get("composers", 0)
    categories = totals.get("categories", 0)
    
    text += f"üéµ <b>–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π:</b> {works:,}\n"
    text += f"üë®‚Äçüéº <b>–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä–æ–≤:</b> {composers:,}\n"
    text += f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–π:</b> {categories:,}\n"
    
    # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    top_categories = stats.get("topCategories", [])
    if top_categories:
        text += f"\nüèÜ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        for i, cat in enumerate(top_categories[:5], 1):
            name = cat.get("category", "")
            count = cat.get("works_count", 0)
            text += f"{i}. {name} ({count})\n"
    
    return text


def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    
    if size_bytes < 1024:
        return f"{size_bytes} –ë"
    elif size_bytes < 1024 * 1024:
        return f"{round(size_bytes / 1024, 1)} –ö–ë"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{round(size_bytes / (1024 * 1024), 1)} –ú–ë"
    else:
        return f"{round(size_bytes / (1024 * 1024 * 1024), 1)} –ì–ë"


def format_error_message(error_type: str, details: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
    
    error_messages = {
        "unauthorized": "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login",
        "not_found": "‚ùå –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "api_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        "connection_error": "üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º",
        "timeout": "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞",
        "validation_error": "üìù –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
        "permission_denied": "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"
    }
    
    message = error_messages.get(error_type, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    if details:
        message += f"\n\n<i>{details}</i>"
    
    return message


def truncate_text(text: str, max_length: int = 4000) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram"""
    
    if len(text) <= max_length:
        return text
    
    # –û–±—Ä–µ–∑–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    truncated = text[:max_length - 20]
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–µ–∑–∞—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏
    last_newline = truncated.rfind('\n')
    if last_newline > max_length * 0.8:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É
        truncated = truncated[:last_newline]
    
    return truncated + "\n\n<i>... —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ</i>"


def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown"""
    
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    
    return text