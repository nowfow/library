services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: music-library-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT:-3306}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      WEBDAV_URL: ${WEBDAV_URL}
      WEBDAV_USER: ${WEBDAV_USER}
      WEBDAV_PASSWORD: ${WEBDAV_PASSWORD}
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - music-library-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/terms", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: music-library-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3000
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - music-library-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot
  telegram-bot:
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile
    container_name: music-library-telegram-bot
    restart: unless-stopped
    environment:
      NODE_ENV: production
      BOT_TOKEN: ${BOT_TOKEN}
      API_BASE_URL: http://backend:3000
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT:-3306}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      WEBDAV_URL: ${WEBDAV_URL}
      WEBDAV_USER: ${WEBDAV_USER}
      WEBDAV_PASSWORD: ${WEBDAV_PASSWORD}
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./telegram-bot/logs:/app/logs
    networks:
      - music-library-network
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Bot health check')"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  music-library-network:
    driver: bridge
    name: music-library-network