#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ terms.csv
 */

import { promises as fs } from 'fs';
import path from 'path';

async function checkTermsCSV() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ terms.csv...');
  
  const csvPath = 'files/terms.csv';
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    await fs.access(csvPath);
    console.log('‚úÖ –§–∞–π–ª terms.csv –Ω–∞–π–¥–µ–Ω');
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const content = await fs.readFile(csvPath, 'utf-8');
    const lines = content.split('\n').filter(line => line.trim());
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lines.length} —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
    console.log('\nüìã –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞:');
    for (let i = 0; i < Math.min(5, lines.length); i++) {
      const line = lines[i];
      console.log(`${i + 1}: ${line.substring(0, 80)}${line.length > 80 ? '...' : ''}`);
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    let validCount = 0;
    let invalidCount = 0;
    
    for (let i = 0; i < Math.min(10, lines.length); i++) {
      const line = lines[i];
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∑–∞–ø—è—Ç–∞—è (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
      if (line.includes(',')) {
        validCount++;
      } else {
        invalidCount++;
        console.log(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞–ø—è—Ç—É—é`);
      }
    }
    
    console.log(`\nüìà –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫:`);
    console.log(`‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: ${validCount}`);
    console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: ${invalidCount}`);
    
    if (validCount > invalidCount) {
      console.log('\nüéâ –§–∞–π–ª terms.csv –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É!');
      
      console.log('\nüí° –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
      console.log('   cd backend');
      console.log('   npm install');
      console.log('   node import-terms.js ../files/terms.csv');
      
      console.log('\nüí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î:');
      console.log('   cd backend');
      console.log('   node populate-db.js');
      
    } else {
      console.log('\n‚ùå –§–∞–π–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞:', error.message);
    
    if (error.code === 'ENOENT') {
      console.log('\nüí° –§–∞–π–ª terms.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ files/');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkTermsCSV();